@page "/inspector/metricexternal/{id:int}"
@inject IMetricExternalCollection metricExternalData
@inject IMetricWireCollection metricWireData
@inject NavigationManager navManager
@attribute [Authorize]
<h1 class="page-heading text-center">
    Inspector's Page for Metric External Thread Info check
</h1>
<h1 class="accordion-header text-center">
    @metricExternal.CustomThreadDesignition  @metricExternal.Classification
</h1>
<h3>More info and parameter will be added with coordination with Quality Department Machining Lab</h3>
<div>
    <div>
        @if (metricExternal is not null)
        {
            <div>
            <table class="table table-dark table-striped table border-2 table-bordered">
                <thead>
                    <tr class="text-center">
                        <th scope="col">Unit System</th>
                        <th scope="col">Max Major Diameter</th>
                        <th scope="col">Min Major Diameter</th>
                        <th scope="col">Max Pitch Diameter</th>
                        <th scope="col">Min Pitch Diameter</th>
                        <th scope="col">Max Minor Diameter</th>
                        <th scope="col">Min Minor Diameter</th>
                    </tr>
                </thead>
                <tbody>
                    <tr class="text-center">
                        <th scope="col">Metric System</th>
                        <th scope="col">@metricExternal.MajorDiaMax</th>
                        <th scope="col">@metricExternal.MajorDiaMin</th>
                        <th scope="col">@metricExternal.PitchDiaMax</th>
                        <th scope="col">@metricExternal.PitchDiaMin</th>
                        <th scope="col">@metricExternal.MinorDiaMax</th>
                        <th scope="col">@metricExternal.MinorDiaMin</th>
                    </tr>
                    <tr class="text-center">
                        <th scope="col">English System</th>
                        <th scope="col">@Math.Round(metricExternal.MajorDiaMax/25.4,4)</th>
                        <th scope="col">@Math.Round(metricExternal.MajorDiaMin/25.4,4)</th>
                        <th scope="col">@Math.Round(metricExternal.PitchDiaMax/25.4,4)</th>
                        <th scope="col">@Math.Round(metricExternal.PitchDiaMin/25.4,4)</th>
                        <th scope="col">@Math.Round(metricExternal.MinorDiaMax/25.4,4)</th>
                        <th scope="col">@Math.Round(metricExternal.MinorDiaMin/25.4,4)</th>
                    </tr>
                </tbody>
            </table>
            </div>
        }
    </div>
</div>
<div>
    <div>
        @if(metricWire is not null)
        {
            <div>
                <table class="table table-dark table-striped table border-2 table-bordered">
                    <thead>
                        <tr class="text-center">
                            <th scope="col">Unit system</th>
                            <th scope="col">Wire Pitch</th>
                            <th scope="col">Wire size</th>
                            <th scope="col">Wire Add</th>
                            <th scope="col">Wire Constant</th>
                            <th scope="col">OverWires Diameter Max</th>
                            <th scope="col">OverWires Diameter Min</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="text-center">
                            <th scope="col">Metric system</th>
                            <th scope="col">@(metricWire.Pitch)</th>
                            <th scope="col">@(metricWire.WireSize)</th>
                            <th scope="col">@(metricWire.Add)</th>
                            <th scope="col">@(metricWire.Constant)</th>
                            <th scope="col">@Math.Round(metricExternal.PitchDiaMax + metricWire.Add,3)</th>
                            <th scope="col">@Math.Round(metricExternal.PitchDiaMin + metricWire.Add,3)</th>
                        </tr>
                        <tr class="text-center">
                            <th scope="col">English System</th>
                            <th scope="col">@Math.Round(metricWire.Pitch/25.4,4)</th>
                            <th scope="col">@Math.Round(metricWire.WireSize/25.4,4)</th>
                            <th scope="col">@Math.Round(metricWire.Add/25.4,4)</th>
                            <th scope="col">@Math.Round(metricWire.Constant/25.4,4)</th>
                            <th scope="col">@Math.Round((metricExternal.PitchDiaMax + metricWire.Add)/25.4,4)</th>
                            <th scope="col">@Math.Round((metricExternal.PitchDiaMin + metricWire.Add)/25.4,4)</th>
                        </tr>
                    </tbody>
                </table>
            </div>
        }
        @if(metricWire is null)
        {
            <div>
                <span>
                    No corresponding wires with this external thread.
                </span>
            </div>
        }
    </div>
</div>
<div>
    <button class="btn btn-close btn-outline-light btn-primary" @onclick="()=>ClosePage()"></button>
    <button class="btn btn-light btn-outline-info btn-dark"@onclick="()=>ToHomePage()">Back to Home Page</button>
</div>
@code {
    [Parameter]
    public int Id { get; set; }
    private MetricExternal metricExternal;
    private MetricWire? metricWire;
    protected async override Task OnInitializedAsync()
    {
        metricExternal = await metricExternalData.GetMetricExternalByInternalId(Id);
        try
        {
            metricWire = await metricWireData.GetMetricWireAsync(metricExternal.Pitch);
        }
        catch(Exception)
        {
            metricWire = null;
            throw;
        }
    }
    private void ClosePage()
    {
        navManager.NavigateTo($"/metricexternal");
    }
    private void ToHomePage()
    {
        navManager.NavigateTo($"/");
    }

}
