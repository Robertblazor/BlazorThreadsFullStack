@page "/metricexternal"
@using ThreadsLib.DataAccess;
@using ThreadsLib.Models;
@attribute [Authorize]
@inject AuthenticationStateProvider authProvider
@inject IUserCollection userData
@inject IMetricExternalCollection metricExternalData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<div class = "container text-lg-start"><h1>Metric External Page</h1></div>
<div class="container">
    <div class="row">
        <input type="text" placeholder = "Type Designition To Search" aria-label = "Search Box" class="col-lg-8" @oninput="((txt)=>OnSearchInput((string)txt.Value))"/>
    </div>
</div>
<div>
    <div>
        @if(metricExternals is not null)
        {
            <Virtualize Items = "@metricExternals" Context="me" OverscanCount="10">
                <div class="card mt-3 border-5">
                    <table>
                        <thead>
                            <tr>
                                <th scope="col">Thread Designition</th>
                                <th scope="col">Thread Class</th>
                                <th scope="col">Major Diameter</th>
                                <th scope="col">Pitch Diameter</th>
                                <th scope="col">Minor Diameter</th>
                                <th scope="col"><button type="button" class=" btn btn-outline-dark btn-secondary" @onclick ="()=>OpenDrafterDetails(me)">Drafter Details</button></th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <th scope="col">@me.CustomThreadDesignition</th>
                                <th scope="col">@me.Classification</th>
                                <th scope="col">@me.MajorDiaMin - @me.MajorDiaMax</th>
                                <th scope="col">@me.PitchDiaMin - @me.PitchDiaMax</th>
                                <th scope="col">@me.MinorDiaMin - @me.MinorDiaMax</th>
                                <th scope="col"><button type="button" class="btn btn-outline-info btn-primary" @onclick = "()=>OpenInspectorDetails(me)">Inspector Details</button></th>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </Virtualize>
        }
    </div>
</div>
@code {
    private List<MetricExternal> metricExternals;
    private string searchText = "";
    private UserModel loggedInUser;
    protected async override Task OnInitializedAsync()
    {
        metricExternals = await metricExternalData.GetAllMetricExternalsAsync();
        loggedInUser = await authProvider.GetUserFromAuthAsync(userData);
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterMetricExternals();
            StateHasChanged();
        }
    }
    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";
    }
    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchText), searchText);
    }
    private async Task FilterMetricExternals()
    {
        var output = await metricExternalData.GetAllMetricExternalsAsync();
        if (string.IsNullOrWhiteSpace(searchText)==false)
        {
            output = output.Where(me => me.CustomThreadDesignition.Contains(searchText, StringComparison.InvariantCultureIgnoreCase))
            .OrderBy(me => me.InternalId)
            .ToList();
        }
        metricExternals = output;
        await SaveFilterState();
    }
    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterMetricExternals();
    }
    private void OpenDrafterDetails(MetricExternal metricExternal)
    {
        navManager.NavigateTo($"/drafter/metricexternal/{metricExternal.InternalId}");
    }
    private void OpenInspectorDetails(MetricExternal metricExternal)
    {
        navManager.NavigateTo($"/inspector/metricexternal/{metricExternal.InternalId}");
    }
}
